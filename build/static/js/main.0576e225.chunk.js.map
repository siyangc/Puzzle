{"version":3,"sources":["components/square.js","components/board.js","components/menu.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["square","props","squareStyle","background","value","border","fontSize","fontWeight","textAlign","lineHeight","style","onClick","board","display","gridTemplateColumns","width","height","margin","boxSizing","map","pos","key","bind","menu","message","game","componentWillMount","setState","order","randomOrder","gameStyle","correctOrder","handleRetry","e","newOrder","handleSelect","state","nextMove","move","length","checkWin","Order","i","randomIndex","Math","floor","random","itemAtIndex","push","filter","toString","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sMAEe,SAASA,EAAOC,GAE3B,IAAMC,EAAc,CAChBC,WAAYF,EAAMG,MAAO,UAAU,OACnCC,OAAQ,iBACRC,SAAU,OACVC,WAAY,OACZC,UAAW,SACXC,WAAY,SAGhB,OACI,yBAAKC,MAAOR,EAAaS,QAASV,EAAMU,SACnCV,EAAMG,OCZJ,SAASQ,EAAMX,GAAQ,IAAD,OAYjC,OACI,yBAAKS,MAXU,CACfG,QAAS,OACTC,oBAAqB,cACrBT,OAAQ,iBACRU,MAAO,QACPC,OAAQ,QACRC,OAAQ,OACRC,UAAW,eAEE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAGhBC,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CAAQC,IAAKD,EACLhB,MAAOH,EAAMG,MAAMgB,GACnBT,QAASV,EAAMU,QAAQW,KAAK,EAAKF,SClB1C,SAASG,EAAKtB,GACzB,OACI,6BACI,4BAAQU,QAASV,EAAMU,SAAvB,SAGCV,EAAMuB,S,ICLEC,E,kDACjB,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IAOVyB,mBAAqB,WACjB,EAAKC,SAAS,CAACC,MAAM,EAAKC,iBATZ,EAalBC,UAAY,CACRb,OAAQ,QAdM,EAgBlBc,aAAe,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAhBd,EAkBlBC,YAAc,SAACC,GACX,IAAIC,EAAW,EAAKL,cACpB,EAAKF,SAAS,CAACC,MAAMM,KApBP,EAuBlBC,aAAe,SAACf,GAEZ,GAAI,EAAKgB,MAAMR,MAAMR,GAArB,CAGA,IAAIiB,EAAW,EAAKC,KAAKlB,GAEzB,GAAqB,IAAlBiB,EAASE,OAAZ,CACI,IAAIL,EAAQ,YAAO,EAAKE,MAAMR,OAC9BM,EAASG,GAAYH,EAASd,GAC9Bc,EAASd,GAAO,KACb,EAAKoB,SAASN,GACb,EAAKP,SAAS,CAACC,MAAMM,EAASV,QAAQ,oBAEtC,EAAKG,SAAS,CAACC,MAAMM,OArCf,EA6ClBL,YAAc,WAEV,IADA,IAAIY,EAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAClBC,EAAE,EAAEA,GAAG,EAAEA,IAAI,CAClB,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,UAAUJ,EAAE,IAC1CK,EAAcN,EAAME,GACxBF,EAAME,GAAeF,EAAMC,GAC3BD,EAAMC,GAAKK,EAIf,OAFAN,EAAMO,KAAK,MAEJP,GAvDO,EAyDlBH,KAAO,SAAClB,GAaJ,MAZgB,CACZ,CAAC,EAAE,GACH,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,GACH,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,GACH,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,IAEeA,GAAK6B,QAAO,SAAAP,GAAC,OAAG,EAAKN,MAAMR,MAAMc,OArEzC,EAwElBF,SAAW,SAACZ,GAER,OADaA,EAAMsB,aAAe,EAAKnB,aAAamB,YAvEpD,EAAKd,MAAQ,CACTR,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MACxBJ,QAAS,uBAJC,E,qDA8Ed,OACI,6BACI,yBAAKd,MAAOyC,KAAKrB,WACb,kBAAC,EAAD,CAAQ1B,MAAO+C,KAAKf,MAAMR,MAClBjB,QAASwC,KAAKhB,gBAG1B,6BACI,kBAAC,EAAD,CAAMxB,QAASwC,KAAKnB,YAAaR,QAAS2B,KAAKf,MAAMZ,gB,GAvFvC4B,aCDbC,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJyBD,aCUbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/C,a","file":"static/js/main.0576e225.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function square(props) {\r\n\r\n    const squareStyle = {\r\n        background: props.value? '#66ccff':'#fff',\r\n        border: '2px solid #999',\r\n        fontSize: '24px',\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n        lineHeight: '107px'\r\n    }\r\n\r\n    return (\r\n        <div style={squareStyle} onClick={props.onClick}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Square from './square'\r\n\r\nexport default function board(props) {\r\n\r\n    const boardStyle = {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr 1fr',\r\n        border: '2px solid #999',\r\n        width: '337px',\r\n        height: '337px',\r\n        margin: 'auto',\r\n        boxSizing: 'border-box'\r\n    }\r\n    const position = [0,1,2,3,4,5,6,7,8]\r\n    return (\r\n        <div style={boardStyle}>\r\n            {position.map((pos)=>(\r\n                <Square key={pos} \r\n                        value={props.value[pos]}\r\n                        onClick={props.onClick.bind(this,pos)}\r\n                />\r\n            ))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function menu(props) {\r\n    return (\r\n        <div>\r\n            <button onClick={props.onClick}>\r\n                Retry\r\n            </button>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport Board from './board'\r\nimport Menu from './menu'\r\nexport default class game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            order: [1,2,3,4,5,6,7,8,null],\r\n            message: 'handling the puzzle'        \r\n        }\r\n    }\r\n     \r\n    componentWillMount = () =>{\r\n        this.setState({order:this.randomOrder()})\r\n    }\r\n    \r\n    \r\n    gameStyle = {\r\n        margin: '50px'\r\n    }\r\n    correctOrder = [1,2,3,4,5,6,7,8,null]\r\n\r\n    handleRetry = (e) => {        \r\n        let newOrder = this.randomOrder()\r\n        this.setState({order:newOrder})\r\n    }\r\n    \r\n    handleSelect = (pos) => {\r\n\r\n        if(!this.state.order[pos]){\r\n            return\r\n        }\r\n        let nextMove = this.move(pos)\r\n\r\n        if(nextMove.length===1){           \r\n            let newOrder = [...this.state.order]\r\n            newOrder[nextMove] = newOrder[pos]\r\n            newOrder[pos] = null        \r\n            if(this.checkWin(newOrder)){\r\n                this.setState({order:newOrder,message:'congratulations'})\r\n            }else{\r\n                this.setState({order:newOrder})\r\n            }\r\n            \r\n        }else{\r\n            return\r\n        }\r\n        \r\n    }\r\n    randomOrder = () => {       \r\n        let Order = [1,2,3,4,5,6,7,8];\r\n        for (let i=7;i>=0;i--){\r\n            let randomIndex = Math.floor(Math.random()*(i+1));\r\n            let itemAtIndex = Order[randomIndex]\r\n            Order[randomIndex] = Order[i]\r\n            Order[i] = itemAtIndex\r\n        }\r\n        Order.push(null)\r\n       \r\n        return Order\r\n    };\r\n    move = (pos) => {\r\n        let neighbour = [\r\n            [1,3],\r\n            [0,2,4],\r\n            [1,5],\r\n            [0,4,6],\r\n            [1,3,5,7],\r\n            [2,4,8],\r\n            [3,7],\r\n            [4,6,8],\r\n            [5,7]\r\n        ]        \r\n        let space = neighbour[pos].filter(i=>!this.state.order[i])          \r\n        return space        \r\n    }\r\n    checkWin = (order) => {\r\n        let isWin = (order.toString() === this.correctOrder.toString())\r\n        return isWin\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={this.gameStyle}>\r\n                    <Board  value={this.state.order} \r\n                            onClick={this.handleSelect}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Menu onClick={this.handleRetry} message={this.state.message}/>\r\n                </div>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\nimport Game from './components/game'\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Game/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}